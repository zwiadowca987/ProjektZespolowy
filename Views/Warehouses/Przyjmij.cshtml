@model List<ProjektZespolowy.Models.Warehouse>

@{
    ViewData["Title"] = "Przyjmij Towar";
}

<div class="container mt-4">
    <h1 class="text-center text-primary mb-4">@ViewData["Title"]</h1>

    <div class="card shadow-sm border-primary">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Formularz przyjęcia towaru</h4>
        </div>
        <div class="card-body">
            <form id="przyjmijForm" asp-action="ZapiszPrzyjecie" method="post">
                <div class="table-responsive">
                    <table class="table table-bordered table-striped table-hover" id="przyjmij-table">
                        <thead class="table-primary">
                            <tr>
                                <th>ID Produktu</th>
                                <th>Nazwa Produktu</th>
                                <th>Ilość</th>
                                <th>Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input type="number" name="Warehouses[0].ProduktId" class="form-control produkt-id"
                                           oninput="fetchProductName(this)" />
                                </td>
                                <td>
                                    <input type="text" name="Warehouses[0].NazwaProduktu" class="form-control nazwa-produktu" readonly />
                                </td>
                                <td>
                                    <input type="number" name="Warehouses[0].DostepnaIlosc" class="form-control" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Usuń</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" id="add-row" class="btn btn-primary">Dodaj wiersz</button>
                    <button type="submit" class="btn btn-success">Zapisz</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Informacja</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertModalMessage">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById("add-row").addEventListener("click", function () {
            const table = document.querySelector("#przyjmij-table tbody");
            const rowCount = table.rows.length;
            const newRow = document.createElement("tr");

            newRow.innerHTML = `
                                        <td>
                                            <input type="number" name="Warehouses[${rowCount}].ProduktId" class="form-control produkt-id"
                                                   oninput="fetchProductName(this)" />
                                        </td>
                                        <td>
                                            <input type="text" name="Warehouses[${rowCount}].NazwaProduktu" class="form-control nazwa-produktu" readonly />
                                        </td>
                                        <td>
                                            <input type="number" name="Warehouses[${rowCount}].DostepnaIlosc" class="form-control" />
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" onclick="removeRow(this)">Usuń</button>
                                        </td>`;
            table.appendChild(newRow);
        });

        function removeRow(button) {
            const row = button.closest("tr");
            row.remove();
        }
        async function fetchProductName(inputElement) {
            const productId = inputElement.value;
            const row = inputElement.closest("tr");
            const nameField = row.querySelector(".nazwa-produktu");

            if (!productId) {
                nameField.value = "";
                return;
            }

            try {
                const response = await fetch(`/Warehouses/GetProductName?id=${productId}`);
                if (response.ok) {
                    const productName = await response.text();
                    nameField.value = productName || "Nie znaleziono";
                } else {
                    nameField.value = "Nie znaleziono produktu";
                }
            } catch (error) {
                nameField.value = "Błąd";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('przyjmijForm');
            const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            const alertModalMessage = document.getElementById('alertModalMessage');
            const alertModalLabel = document.getElementById('alertModalLabel');

            form.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(form);

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        showModal('success', '✔️ Przyjęcie zostało zapisane.');
                    setTimeout(() => window.location.href = '@Url.Action("Index", "Warehouses")', 2000);
                    } else {
                        const errorText = await response.text();
                        showModal('danger', `❌ Nie udało się zapisać danych. Szczegóły: ${errorText}`);
                    }
                } catch (error) {
                    showModal('danger', `❌ Wystąpił błąd: ${error.message}`);
                }
            });

            function showModal(type, message) {
                alertModalLabel.textContent = type === 'success' ? 'Sukces' : 'Błąd';
                alertModalMessage.innerHTML = message;
                alertModal.show();
            }
        });
    </script>
}
