@model ProjektZespolowy.Models.Raport

@{
    ViewData["Title"] = "Raport Krytyczny";
}

<div class="container mt-4">
    <h1 class="text-center text-danger mb-4">@ViewData["Title"]</h1>

    <div class="card shadow-sm border-danger">
        <div class="card-header bg-danger text-white">
            <h4 class="mb-0">Formularz raportu krytycznego</h4>
        </div>
        <div class="card-body">
            <form id="criticalReportForm" asp-action="Create" asp-controller="Raports" method="post">
                <div asp-validation-summary="All" class="alert alert-danger d-none"></div>

                <div class="mb-3">
                    <label for="Typ" class="form-label fw-bold">Typ Raportu</label>
                    <input type="text" class="form-control" id="Typ" name="Typ" value="@Model.Typ" readonly />
                </div>

                <div class="mb-3">
                    <label for="DataWygenerowania" class="form-label fw-bold">Data Wygenerowania</label>
                    <input type="text" class="form-control" id="DataWygenerowania" name="DataWygenerowania"
                           value="@Model.DataWygenerowania.ToString("yyyy-MM-dd HH:mm:ss")" readonly />
                </div>

                <div class="mb-3">
                    <label for="Uwagi" class="form-label fw-bold">Uwagi</label>
                    <textarea class="form-control" id="Uwagi" name="Uwagi" rows="3">@Model.Uwagi</textarea>
                </div>

                <h4 class="text-danger">Produkty w raporcie</h4>
                <table class="table table-bordered table-hover" id="raportItemsTable">
                    <thead class="table-danger">
                        <tr>
                            <th>ID Produktu</th>
                            <th>Nazwa Produktu</th>
                            <th>Ilość</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.RaportItems != null && Model.RaportItems.Any())
                        {
                            for (var i = 0; i < Model.RaportItems.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <input type="number" class="form-control produkt-id" name="RaportItems[@i].ProduktId"
                                               value="@Model.RaportItems.ElementAt(i).ProduktId" oninput="fetchProductName(this)" required />
                                    </td>
                                    <td>
                                        <input type="text" class="form-control nazwa-produktu" name="RaportItems[@i].NazwaProduktu" readonly />
                                    </td>
                                    <td>
                                        <input type="number" class="form-control" name="RaportItems[@i].Ilosc"
                                               value="@Model.RaportItems.ElementAt(i).Ilosc" required />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" onclick="removeRow(this)">Usuń</button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <input type="number" class="form-control produkt-id" name="RaportItems[0].ProduktId" oninput="fetchProductName(this)" required />
                                </td>
                                <td>
                                    <input type="text" class="form-control nazwa-produktu" name="RaportItems[0].NazwaProduktu" readonly />
                                </td>
                                <td>
                                    <input type="number" class="form-control" name="RaportItems[0].Ilosc" required />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Usuń</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" id="addRowButton" class="btn btn-primary mb-3">Dodaj wiersz</button>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-success">Zapisz</button>
                    <a asp-action="Index" asp-controller="Raports" class="btn btn-secondary">Powrót</a>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Informacja</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertModalMessage"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addRowButton = document.getElementById('addRowButton');
            const tableBody = document.querySelector('#raportItemsTable tbody');

            addRowButton.addEventListener('click', function () {
                const rowCount = tableBody.rows.length;
                const newRow = document.createElement('tr');

                newRow.innerHTML = `
                    <td>
                        <input type="number" class="form-control produkt-id" name="RaportItems[${rowCount}].ProduktId" oninput="fetchProductName(this)" required />
                    </td>
                    <td>
                        <input type="text" class="form-control nazwa-produktu" name="RaportItems[${rowCount}].NazwaProduktu" readonly />
                    </td>
                    <td>
                        <input type="number" class="form-control" name="RaportItems[${rowCount}].Ilosc" required />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="removeRow(this)">Usuń</button>
                    </td>
                `;

                tableBody.appendChild(newRow);
            });

            window.removeRow = function (button) {
                const row = button.closest('tr');
                row.remove();

                Array.from(tableBody.rows).forEach((row, index) => {
                    row.querySelector('.produkt-id').name = `RaportItems[${index}].ProduktId`;
                    row.querySelector('.nazwa-produktu').name = `RaportItems[${index}].NazwaProduktu`;
                    row.querySelector('[name$=".Ilosc"]').name = `RaportItems[${index}].Ilosc`;
                });
            };

            window.fetchProductName = async function (inputElement) {
                const productId = inputElement.value.trim();
                const row = inputElement.closest('tr');
                const nameField = row.querySelector('.nazwa-produktu');

                if (!productId) {
                    nameField.value = "Brak danych";
                    return;
                }

                try {
                    const response = await fetch(`/Raports/GetProductName?id=${productId}`);
                    if (response.ok) {
                        const productName = await response.text();
                        nameField.value = productName || "Brak danych";
                    } else if (response.status === 404) {
                        nameField.value = "Brak danych";
                    } else {
                        nameField.value = "Błąd połączenia";
                    }
                } catch (error) {
                    nameField.value = "Błąd połączenia";
                }
            };
            const form = document.getElementById('criticalReportForm');
            const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            const alertModalMessage = document.getElementById('alertModalMessage');
            const alertModalLabel = document.getElementById('alertModalLabel');

            form.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(form);

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        showModal('success', '✔️ Raport krytyczny został zapisany.');
                        setTimeout(() => window.location.href = '@Url.Action("Index", "Raports")', 2000);
                    } else {
                        const errorText = await response.text();
                        showModal('danger', `❌ Nie udało się zapisać raportu. Szczegóły: ${errorText}`);
                    }
                } catch (error) {
                    showModal('danger', `❌ Wystąpił błąd: ${error.message}`);
                }
            });

            function showModal(type, message) {
                alertModalLabel.textContent = type === 'success' ? 'Sukces' : 'Błąd';
                alertModalMessage.innerHTML = message;
                alertModal.show();
            }
        });
    </script>
}
