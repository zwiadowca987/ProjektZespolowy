@model ProjektZespolowy.Models.Order

@{
    ViewData["Title"] = "Zaaktualizuj status zamówienia";
    var customers = ViewData["Customers"] as List<SelectListItem> ?? new List<SelectListItem>();
}

<div class="container mt-4">
    <h1 class="text-center text-primary mb-4">@ViewData["Title"]</h1>

    <div class="card shadow-sm border-primary">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Formularz edycji zamówienia</h4>
        </div>
        <div class="card-body">
            <form id="editOrderForm" asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="alert alert-danger d-none"></div>

                <input type="hidden" asp-for="OrderId" />
                <input type="hidden" asp-for="CustomerId" />

                <div class="mb-3">
                    <label for="CustomerId" class="form-label">ID Klienta</label>
                    <input type="text" class="form-control" id="CustomerId" value="@Model.CustomerId" readonly />
                </div>
                <div class="mb-3">
                    <label for="CustomerName" class="form-label">Nazwa Klienta</label>
                    <input type="text" class="form-control" id="CustomerName"
                           value="@customers.FirstOrDefault(c => c.Value == Model.CustomerId.ToString())?.Text ?? " Nieznany klient"" readonly />
                </div>

                <div class="mb-3">
                    <label for="Date" class="form-label fw-bold">Data Wygenerowania</label>
                    <input type="text" class="form-control" id="Date" name="DataWygenerowania"
                           value="@Model.Date.ToString("yyyy-MM-dd HH:mm:ss")" readonly />
                </div>

                <div class="mb-3">
                    <label asp-for="Price" class="control-label">Cena</label>
                    <input asp-for="Price" class="form-control" type="number" step="0.01" lang="pl" readonly />
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Status" class="form-label fw-bold">Status</label>
                    <select asp-for="Status" class="form-select">
                        <option value="Nowe">Nowe</option>
                        <option value="Anulowane">Anulowane</option>
                        <option value="Odrzucone">Odrzucone</option>
                        <option value="Nieznane">Nieznane</option>
                        <option value="Nierozpoczęte">Nierozpoczęte</option>
                        <option value="Trwa realizacja">Trwa realizacja</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>

                <h4 class="text-secondary mt-4">Pozycje zamówienia</h4>
                <table class="table table-bordered table-striped">
                    <thead class="table-primary">
                        <tr>
                            <th>ID Produktu</th>
                            <th>Nazwa Produktu</th>
                            <th>Ilość</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.OrderDetails != null && Model.OrderDetails.Any())
                        {
                            foreach (var item in Model.OrderDetails)
                            {
                                <tr>
                                    <td>@item.ProductId</td>
                                    <td>
                                        @if (item.Product != null)
                                        {
                                            @item.Product.NazwaProduktu
                                        }
                                        else
                                        {
                                            <em>Brak danych o produkcie</em>
                                        }
                                    </td>
                                    <td>@item.Quantity</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center">Brak szczegółów zamówienia.</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-success">Zapisz</button>
                    <a asp-action="Index" class="btn btn-secondary">Powrót do listy</a>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Informacja</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="alertModalMessage"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('editOrderForm');
            const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            const alertModalMessage = document.getElementById('alertModalMessage');
            const alertModalLabel = document.getElementById('alertModalLabel');

            form.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(form);

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        showModal('success', '✔️ Zamówienie zostało zapisane.');
                        setTimeout(() => window.location.href = '@Url.Action("Index", "Orders")', 2000);
                    } else {
                        const errorText = await response.text();
                        showModal('danger', `❌ Nie udało się zapisać zamówienia. Szczegóły: ${errorText}`);
                    }
                } catch (error) {
                    showModal('danger', `❌ Wystąpił błąd: ${error.message}`);
                }
            });

            function showModal(type, message) {
                alertModalLabel.textContent = type === 'success' ? 'Sukces' : 'Błąd';
                alertModalMessage.innerHTML = message;
                alertModal.show();
            }
        });
    </script>
}
